1.特殊字符（需要转义的）：
    \     转义；
    ^     表示反向，如[^a]:匹配不是 a 的字符;
          不在 [] 时表示匹配输入字符串的开始位置;
    $     匹配输入字符串的结尾位置;
          反向引用时作为分组符号；
    ()    标记一个子表达式的开始和结束位置;
    []    标记一个中括号表达式的开始和结束;
          //注：一对 [] 是单字符匹配
    {}    标记限定符表达式的开始和结束;
    |     指明两项之间的一个选择（或);
    
    .     匹配除换行符 \n 以及回车符 \r 之外的任何单字符。
    
    ?     匹配 0~1 次;
    +     匹配 1~ ∞  次;
    *     匹配 0~ ∞  次;
   
2.限定符（表示匹配次数的）：
    ?, +, *   也是限定符;
    {n}       n非负，匹配 n 次;
    {n,}      n非负，至少匹配 n 次；
    {n, m}    n,m非负，n <= m, 匹配 n~m 次;
  
3.范围
    [abcde]   a、b、c、d、e 中的任一字符；
    [a-z]     a-z 中的任一字符；
    [a-zA-Z]  a-z , A-Z 中的仍以字符；
    
    \d        0 - 9 任一数字字符，等价于 [0-9];
    \D        非数字字符，等价于 [^0-9];
    \s        空白符，等价于 [\t\n\x0B\f\r];
    \S        非空白符，等价于 [^\t\n\x0B\f\r];
    \w        单词字符，等价于 [a-zA-Z0-9_] (注意下滑线);
    \W        非单词字符，等价于 [^a-zA-Z0-9_] (注意下滑线);
    
4.贪婪模式与非贪婪模式
    非贪婪模式：尝试最少匹配；
        在量词后面加上 ? 即可，如：'12345678'.replace(/\d{3,6}?/g,'x') ==> xx78;
    贪婪模式：最大匹配：
        默认次模式，如： '12345678'.replace(/\d{3,6}/g,'x') ==> x78;
        
5.分组和反向引用
    () 表示分组，如：'a1b2c3d4'.replace(/[a-z]\d{3}/g,'x') ==> a1b2c3d4;
                    'a1b2c3d4'.replace(/([a-z]\d){3}/g,'x') ==> xd4;
    | 表示或，如：'this is byroncasper data'.replace(/byron|casper/gi,'0') ==> this is 00 data;
                 'this is byroncasper byronsper byrcasper data'.replace(/byr(on|ca)sper/gi,'0') ==> this is byroncasper 0 0 data;
    反向引用，如： 需要 2015-12-06 ==> 12/06/2015,
                      '2015-12-06'.replace(/(\d{4})-(\d{2})-(\d{2})/g,'$2/$3/$1');
                      
6.前瞻：（类似于css中带特定条件的选择器）
    正则表达式从文本头部先向尾部解析，文本尾部方向即为"前"；
    ![image](https://github.com/shiweiqianju/Regular-Expression/raw/master/images/前瞻.jpg)
n.元字符
    \n        换行
    \r        回车
    \f        换页
    \0        空字符（空格）
    \t        水平制表符
    \v        垂直制表符
    \cX       crtl + X         ...
